[
  {
    "page": 1,
    "content": "Week 1: Introduction to C Programming – From Python to C\n• Title: Transitioning from Python to C – Foundations for Systems & AI\n• Learning Objectives (5 bullets):\n  1. Articulate core differences between interpreted (Python) and compiled (C) execution.\n  2. Write, compile, and run a minimal “Hello, World!” C program using gcc.\n  3. Declare variables with explicit static types (int, float, double, char).\n  4. Use printf/scanf for basic console I/O and debug with printf.\n  5. Trace the four-stage compilation pipeline (preprocess → compile → assemble → link).\n• Course Map: Session 1 (200 min) – Basics; Session 2 (200 min) – Control & Functions\n• Assessment: Weekly checkpoint quiz + 5 Python→C conversions + calculator mini-project\n• Setup Reminder: Install GCC or Clang + VS Code (with C/C++ extension) before next class."
  },
  {
    "page": 2,
    "content": "Why Learn C for Computer Systems & AI/ML?\n• Systems Perspective\n  – C maps closely to hardware: pointers = addresses, structs = memory layouts.\n  – OS kernels, embedded firmware, high-performance libraries (BLAS, OpenCV) are written in C.\n• AI/ML Connection\n  – TensorFlow Lite Micro runs on C++ (subset of C concepts).\n  – Understand memory and cache behavior to optimize Python extensions (e.g., NumPy backend).\n• Career Edge\n  – Device drivers, GPU kernels, real-time robotics demand C mastery.\n• Visual Metaphor: Stack diagram showing Python interpreter layer vs. C running directly on silicon."
  },
  {
    "page": 3,
    "content": "Python vs. C – Key Paradigm Shifts\n• Execution Model\n  – Python: Interpreter (CPython) executes bytecode at runtime.\n  – C: Compiler (gcc) translates to machine code once; .exe/.out runs natively.\n• Typing Discipline\n  – Python: Dynamic, duck-typed.  x = 10; x = \"hi\"  # legal\n  – C: Static, explicit.  int x = 10; x = \"hi\";  // compile-time error\n• Memory Management\n  – Python: Automatic garbage collection.\n  – C: Manual malloc/free; risk of leaks & dangling pointers.\n• Syntax Snapshot (side-by-side)\n  – Variables, loops, functions: 4 comparative code snippets\n• Take-away Table: 3×3 matrix summarizing interpreted vs. compiled, dynamic vs. static, auto vs. manual memory."
  },
  {
    "page": 4,
    "content": "Your First C Program – Live Demo & Deconstruction\n• Code\n  #include <stdio.h>\n\n  int main(void) {\n      printf(\"Hello, World!\\n\");\n      return 0;\n  }\n• Anatomy Line-by-Line\n  – #include <stdio.h> : preprocessor directive to pull in standard I/O headers.\n  – int main(void) : program entry point mandated by C runtime; returns exit status.\n  – printf format string \"%s\" and newline necessity.\n  – return 0; signals success to OS.\n• Compilation Command\n  gcc hello.c -o hello\n  ./hello  # execute\n• Common Errors & Fixes\n  – forgetting \\n leads to shell prompt collision; forgetting return type defaults to int in old C but warning in C99."
  },
  {
    "page": 5,
    "content": "Basic C Syntax Deep Dive – Variables and Types\n• Variable Declaration & Initialization\n  int    age      = 21;        // 4 bytes signed\n  float  gpa      = 3.7f;      // 4 bytes IEEE-754\n  double pi       = 3.141592653589793;\n  char   initial  = 'A';       // 1 byte ASCII\n• Type Specifiers & Qualifiers\n  short, long, long long, unsigned, const, volatile.\n• Identifier Rules\n  – Must start with letter/underscore; case-sensitive.\n• Format Specifiers Cheat-Sheet\n  %d %f %lf %c %s\n• Live Exercise: Prompt user for age & gpa with scanf; verify proper ampersand usage & address passing.\n• Pitfall Showcase: Mismatch %f with int variable yields UB."
  },
  {
    "page": 6,
    "content": "Input & Output – printf and scanf Patterns\n• printf Power-Ups\n  – Field width & precision: printf(\"%6.2f\\n\", score);\n  – Escape sequences: \\t \\n \\\\ %%\n• scanf Safety\n  – Always check return value: if (scanf(\"%d\", &n) != 1) { /* handle error */ }\n  – Whitespace handling in %c vs. %s.\n• Mini-Pattern Library\n  – Reading an entire line: fgets(buf, sizeof(buf), stdin).\n  – Converting strings to numbers: strtol, atof.\n• Interactive Demo: Build a Fahrenheit→Celsius converter accepting float input and printing with one decimal place."
  },
  {
    "page": 7,
    "content": "The Compilation Pipeline – From .c to Executable\n• Four Stages\n  1. Preprocessing: handles #includes, macros (gcc -E).\n  2. Compilation: generates assembly (gcc -S).\n  3. Assembly: converts .s to .o object code (as).\n  4. Linking: combines object files & libraries into a.out (ld).\n• Diagram: Horizontal flowchart with file extensions .c → .i → .s → .o → a.out.\n• gcc Flags Cheatsheet\n  – -Wall -Wextra -std=c99 -g -O2\n• Reading Error Messages\n  – ‘undefined reference’ vs. ‘implicit declaration’; line numbers.\n• Hands-On Lab\n  – Compile with each stage saved: gcc -save-temps hello.c.\n  – Inspect hello.i and hello.s to see macro expansion and assembly."
  },
  {
    "page": 8,
    "content": "Control Structures in C – if, for, while, do-while\n• Syntax Side-by-Side with Python\n  C: if (x > 0) { … } vs. Python: if x > 0:\n• Loop Variants\n  – for (init; condition; update) { … }\n  – while (condition) { … }\n  – do { … } while (condition);  // executes at least once\n• Scope & Braces Rules\n  – Single statement after if may omit braces (discouraged).\n  – Counter variable declared inside for loop (C99 style: for (int i=0; …)).\n• Mini-Pattern: Sentinel-controlled while loop reading integers until 0.\n• Exercise Starter File: Provide buggy factorial loop; students fix off-by-one & integer overflow."
  },
  {
    "page": 9,
    "content": "Functions in C – Declaration, Definition, Scope\n• Anatomy\n  return_type name(parameter_list) { body }\n• Declaration vs. Definition\n  – Prototype in header or top of file: double square(double x);\n  – Definition later: double square(double x) { return x*x; }\n• Parameter Passing Semantics\n  – By value: copies passed; use pointers for by-reference.\n  – Example: swap(int *a, int *b).\n• Storage Classes & Scope\n  – auto (local default), static (retains value), extern (global linkage).\n• Live Demo: Refactor Fahrenheit→Celsius to use functions convertFtoC() and getInput().\n• Checkpoint Quiz (auto-graded): Identify correct prototype for int max(int, int);"
  },
  {
    "page": 10,
    "content": "Week 1 Wrap-Up & Homework\n• Key Takeaways Slide (icon check-list)\n  – Compiled vs. interpreted ✅\n  – Static typing & memory awareness ✅\n  – Compilation stages & gcc flags ✅\n  – Basic I/O, loops, functions ✅\n• Homework Assignment Grid\n  1. Environment: Screenshot of gcc --version & IDE configuration (10 pts).\n  2. Syntax Practice: Convert 5 provided Python snippets (variables, loops, lists) to equivalent C (30 pts).\n  3. Control Structures: Write a C program printing prime numbers up to N using user input (20 pts).\n  4. Functions: Implement a four-function calculator (+ - * /) with separate functions for each operation (25 pts).\n  5. Debugging: Fix 3 intentionally broken C files; document errors & fixes (15 pts).\n• Resources Links\n  – Official GCC manual, VS Code C/C++ extension guide, C99 standard draft (annotated).\n• Next Week Teaser: Pointers and arrays – the real superpowers of C!"
  }
]